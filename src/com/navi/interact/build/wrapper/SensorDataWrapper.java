package com.navi.interact.build.wrapper;

import java.sql.*;
import java.util.*;
import java.util.Date;
import com.navi.interact.tools.util.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.navi.interact.build.entity.*;
import com.navi.interact.tools.wrapper.*;

import com.navi.interact.tools.wrapper.Wrapper;

// Autogenerated - Do not change the code. TimeStamp: Thu Jul 28 01:04:13 NZST 2016
public class SensorDataWrapper extends Wrapper {

    private static final Logger LOGGER = LogManager.getLogger(SensorDataWrapper.class);

    public static final String TABLE_NAME = "SensorData";

    public static final String BEAN_ID = "SensorDataWrapper";

    public static final String ID = "SensorData.id";
    public static final String WEATHERSTATIONNO = "SensorData.weatherStationNo";
    public static final String SENSORID = "SensorData.sensorId";
    public static final String SESSORDATA = "SensorData.sessorData";
    public static final String DATAUNIT = "SensorData.dataUnit";
    public static final String READDATETIME = "SensorData.readDateTime";

    private Statement stmt;

    // Default constructor
    public SensorDataWrapper() throws Exception {
        stmt = connection.createStatement();
    }
    public SensorData[] getAll() throws Exception {
        String sql = "SELECT * FROM SensorData";
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public SensorData[] executeDynamicQuery(Enum findUsingEnumValue, String dynamicClause) throws Exception {
        String findUsing = null;
        if (findUsingEnumValue.equals(FindUsing.WHERE)) {
            findUsing = DBUtils.WHERE;
        } else if (findUsingEnumValue.equals(FindUsing.INNER_JOIN)) {
            findUsing = DBUtils.INNER_JOIN;
        } else if (findUsingEnumValue.equals(FindUsing.OUTER_JOIN)) {
            findUsing = DBUtils.OUTER_JOIN;
        }
        String sql = "SELECT * FROM SensorData "+findUsing+" "+dynamicClause+";";
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public boolean insert(SensorData sensordata) throws Exception {
        String sql = "INSERT INTO SensorData(weatherStationNo,sensorId,sessorData,dataUnit,readDateTime)";
        String values = "VALUES("+((sensordata.getWeatherStationNo()!=null)?"'"+sensordata.getWeatherStationNo()+"'":null)+","+sensordata.getSensorId()+","+sensordata.getSessorData()+","+((sensordata.getDataUnit()!=null)?"'"+sensordata.getDataUnit()+"'":null)+","+((sensordata.getReadDateTime()!=null)?"'"+sensordata.getReadDateTime()+"'":null)+")";
        LOGGER.debug(sql+values);
        return stmt.execute(sql+values);
    }
    public boolean update(SensorData sensordata) throws Exception {
        String sql = "UPDATE SensorData SET weatherStationNo="+((sensordata.getWeatherStationNo()!=null)?"'"+sensordata.getWeatherStationNo()+"'":null)+",sensorId="+sensordata.getSensorId()+",sessorData="+sensordata.getSessorData()+",dataUnit="+((sensordata.getDataUnit()!=null)?"'"+sensordata.getDataUnit()+"'":null)+",readDateTime="+((sensordata.getReadDateTime()!=null)?"'"+sensordata.getReadDateTime()+"'":null)+" WHERE id="+sensordata.getId();
        LOGGER.debug(sql);
        return stmt.execute(sql);
    }
    public boolean delete(SensorData sensordata) throws Exception {
        String sql = "DELETE FROM SensorData WHERE id="+sensordata.getId();
        LOGGER.debug(sql);
        return stmt.execute(sql);
    }
    public SensorData[] getSensorDataById(int id) throws Exception {
        String sql = "SELECT * FROM SensorData WHERE id="+id;
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public SensorData[] getSensorDataByWeatherStationNo(String weatherStationNo) throws Exception {
        String sql = "SELECT * FROM SensorData WHERE weatherStationNo='"+weatherStationNo+"'";
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public SensorData[] getSensorDataBySensorId(int sensorId) throws Exception {
        String sql = "SELECT * FROM SensorData WHERE sensorId="+sensorId;
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public SensorData[] getSensorDataBySessorData(double sessorData) throws Exception {
        String sql = "SELECT * FROM SensorData WHERE sessorData="+sessorData;
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public SensorData[] getSensorDataByDataUnit(String dataUnit) throws Exception {
        String sql = "SELECT * FROM SensorData WHERE dataUnit='"+dataUnit+"'";
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    public SensorData[] getSensorDataByReadDateTime(Date readDateTime) throws Exception {
        String sql = "SELECT * FROM SensorData WHERE readDateTime='"+readDateTime+"'";
        LOGGER.debug(sql);
        ResultSet rset = stmt.executeQuery(sql);
        return this.getResults(rset);
    }
    
    private SensorData[] getResults(ResultSet rset) throws Exception {
        ArrayList<SensorData> sensordataList = new ArrayList<SensorData>();
        while(rset.next()) {
            SensorData sensordata = new SensorData();
            sensordata.setId(rset.getInt("id"));
            sensordata.setWeatherStationNo(rset.getString("weatherStationNo"));
            sensordata.setSensorId(rset.getInt("sensorId"));
            sensordata.setSessorData(rset.getDouble("sessorData"));
            sensordata.setDataUnit(rset.getString("dataUnit"));
            sensordata.setReadDateTime(rset.getDate("readDateTime"));
            sensordataList.add(sensordata);
        }
        SensorData[] sensordatas = new SensorData[sensordataList.size()];;
        for (int i=0; i<sensordataList.size(); i++) {;
            sensordatas[i] = sensordataList.get(i);;
        }
        return sensordatas;
    }
}
